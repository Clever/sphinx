Interfaces will Save the Future
Case Study: Sphinx Rate Limiter

21 Jan 2015


Mohit Gupta & Alex Zylman
@mohitgupta
@amzylman

Clever
https://clever.com
https://github.com/Clever


# short introductions: name and position + 2 line summary of Clever


* But what is Sphinx?


- HTTP Rate Limiter
- Based on leaky-bucket (with Redis and in-memory stores)
- Supports Request Headers and IP address matching
- Dynamic Bucket names generated using regex captures
- Transparent limiting through X-Rate-Limit headers
- Low request latencies (~15 ms)

.image ../logo.png _ 250


* A Request in Sphinx-land


* ♥ Interface ♥

- Better Collaboration
- Easier and more reliable testing
- Swapable behaviors
- Bonus: 10 lines for Daemon HUP Reloads
- DISCUSS!!


* Better Collaboration on a Codebase

- Define a scaffold and then compoents can be built independently
- Test driven development for every component


* Example: Collaborating using interfaces
.code rate_limiter_examples/rate_limiter.go /START OMIT/,/END OMIT/
* Example: Collaborating using interfaces
.code rate_limiter_examples/rate_limiter_mock.go /START OMIT/,/END OMIT/
* Example: Collaborating using interfaces
.code rate_limiter_examples/rate_limiter_test.go /START OMIT/,/END OMIT/


* Interfaces: Better Testing

- Defining tests for an interface helps keeps implementations
  more reliable.

# LeakyBucket interface and how all implementations are tested through it.


* [Mohit] Example: Redis vs in-memory implementations for LeakyBucket

* Swappable behaviors

.code http_limiter_examples/constructors.go /START OMIT/,/END OMIT/

- [mohit] Plugins?


* [Mohit?] Bonus: Adding dynamic configuration reload



* [Alex?] Benchmarking
